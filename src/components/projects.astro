---
import { Image } from "astro:assets";
import lakehouse from "../../public/lakehouse.png";
import stockmarket from "../../public/stockmarket.png";
import northwind from "../../public/northwind.png";
import scholarstream from "../../public/scholarstream.png";
const base = import.meta.env.BASE_URL;


interface Project {
  title: string;
  image: ImageMetadata;
  link: string;
  descriptionRich?: {
    sections: Array<
      | { icon?: string; title: string; type: 'paragraph'; content: string; size?: 'base' | 'lg' }
      | { icon?: string; title: string; type: 'list'; items: string[] }
    >;
  };
}

const projects: Project[] = [
  {
    title: "arXiv Data Lakehouse",
    image: lakehouse as ImageMetadata,
    link: "https://github.com/BrunoChiconato/lakehouse-from-scratch",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Transformar dados brutos e não estruturados da API do arXiv (XML) em um ativo de dados confiável, governado e pronto para análise em escala."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Desenvolvi um pipeline de dados end-to-end que automatiza a ingestão, validação e estruturação de dados, aplicando a Arquitetura Medallion (Bronze, Silver, Gold) no Databricks.",
            "Implementei a automação completa do ciclo de vida do projeto com CI/CD (GitHub Actions) e Infraestrutura como Código (Databricks Asset Bundles), garantindo implantações testáveis e reprodutíveis.",
            "Centralizei a governança e a segurança dos dados com Unity Catalog, permitindo controle de acesso granular e linhagem de dados através das camadas do lakehouse."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Criei um Data Lakehouse otimizado e escalável, disponibilizando dados de alta qualidade para consumo direto por equipes de Business Intelligence, Análise e Ciência de Dados.",
            "Garanti a confiabilidade e a qualidade do pipeline através de uma suíte de testes completa (unitários, de módulo e integração), com 100% de automação do deploy."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "Python, PySpark, Databricks, AWS (S3, IAM), Unity Catalog, Delta Lake, GitHub Actions, Databricks Asset Bundles, Pytest.",
          size: "base"
        }
      ]
    }
  },
  {
    title: "Stock Market",
    image: stockmarket as ImageMetadata,
    link: "https://github.com/BrunoChiconato/airflow-stock-market-pipeline",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Orquestrar um pipeline de dados ponta a ponta para capturar, processar e visualizar dados do mercado de ações (API Yahoo Finance) de forma automatizada e confiável."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Desenvolvi e orquestrei um DAG (Directed Acyclic Graph) em Apache Airflow para automatizar todo o fluxo de trabalho, desde a verificação da disponibilidade da API até a notificação final.",
            "Implementei um processo de ETL distribuído, utilizando Spark para transformar dados brutos (JSON) armazenados em um object store (MinIO) e carregando os dados limpos em um Data Warehouse (PostgreSQL).",
            "Integrei a solução com ferramentas de BI (Metabase) para criar dashboards de visualização de KPIs e com Slack para envio de notificações automáticas sobre o sucesso do pipeline."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Criei uma fonte de verdade centralizada e automatizada, fornecendo dados históricos e agregados prontos para análise de tendências do mercado de ações (NVIDIA).",
            "Aumentei a eficiência operacional e a visibilidade do processo de dados através da orquestração com Airflow, que inclui retentativas automáticas, logging centralizado e alertas proativos."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "Python, PySpark, Airflow, Docker, MinIO, PostgreSQL, Metabase, Slack.",
          size: "base"
        }
      ]
    }
  },
  {
    title: "Northwind",
    image: northwind as ImageMetadata,
    link: "https://github.com/BrunoChiconato/dbt-analytics-pipeline",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Automatizar completamente o ciclo de vida de transformações de dados (ELT), desde o desenvolvimento até a produção, em um ambiente de nuvem seguro, escalável e com custo otimizado."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Provisionei toda a infraestrutura na AWS (VPC, RDS, Fargate, S3) de forma declarativa e reprodutível utilizando Terraform, implementando o conceito de Infraestrutura como Código (IaC).",
            "Construí um pipeline de CI/CD com GitHub Actions que containeriza a aplicação dbt (Docker), executa as transformações de dados em um ambiente serverless (AWS Fargate) e realiza testes de qualidade.",
            "Desenvolvi modelos de dados em dbt seguindo as camadas Staging e Marts, garantindo a qualidade com testes integrados e publicando a documentação do projeto de forma automática."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Reduzi drasticamente o tempo de deploy de novas transformações de dados, permitindo que alterações em modelos sejam testadas e movidas para produção em minutos.",
            "Criei uma solução de análise de dados altamente confiável e com custo otimizado, utilizando execução serverless e garantindo a integridade dos dados através de testes automatizados."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "dbt, AWS (Fargate, RDS, S3, ECR), Terraform, Docker, GitHub Actions, PostgreSQL.",
          size: "base"
        }
      ]
    }
  },
  {
    title: "Scholar Stream",
    image: scholarstream as ImageMetadata,
    link: "https://github.com/BrunoChiconato/scholar-stream",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Construir um pipeline de streaming de dados em tempo real que seja produtivo, governado e observável, desde a ingestão de eventos até o Data Warehouse."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Desenvolvi um pipeline que ingere dados da API OpenAlex em tempo real, utilizando um produtor em Python para enviar eventos ao AWS Kinesis Firehose, com destino direto ao Snowflake.",
            "Automatizei o provisionamento da infraestrutura de ingestão na AWS (Firehose, IAM, S3) utilizando Terraform, garantindo uma implantação rápida, consistente e versionada (IaC).",
            "Implementei governança de dados no Snowflake com controle de acesso baseado em papéis (RBAC) e mascaramento dinâmico de dados sensíveis, além de um dashboard em Streamlit para monitorar a latência."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Disponibilizei dados para análise em segundos (latência p50 < 20s), permitindo a criação de dashboards e a tomada de decisão com informações quase em tempo real.",
            "Garanti a segurança e a conformidade dos dados através de políticas de mascaramento e a confiabilidade da ingestão com retentativas automáticas e backups de erros no S3."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "Python, AWS Kinesis Firehose, Snowflake, Terraform, Streamlit, GitHub Actions.",
          size: "base"
        }
      ]
    }
  },
];
---

<section id="projetos" class="scroll-mt-24 py-12 border-t border-[#ffffff10] text-[var(--white)]">
  <div class="max-w-5xl mx-auto">
    <h2 class="text-lg text-[var(--sec)] mb-2 shiny-sec">Meus projetos</h2>
    <h3 class="text-4xl md:text-5xl font-medium mb-8">Projetos</h3>
    <div class="grid grid-cols-1 gap-0">
      {
        projects.map((project) => (
          <div class="block border-t border-[#ffffff10] py-12 md:py-16 first:border-t-0 first:pt-0">
            <div class="rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 mb-6">
              <div class="aspect-video"> <!-- 16:9 -->
                <Image
                  src={project.image}
                  alt={project.title}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                />
              </div>
            </div>
            <div class="px-3">
              <div>
                <h4 class="text-3xl font-semibold">{project.title}</h4>
                {project.descriptionRich && (
                  <div class="mt-3 space-y-4">
                    {project.descriptionRich.sections.map((sec) => (
                      sec.type === 'paragraph' ? (
                        <p class={`text-[var(--white-icon)] ${
                              sec.size === 'base' ? 'text-base md:text-lg' : 'text-lg md:text-xl'
                            } leading-8`}>
                          {sec.icon ? <span class="mr-2">{sec.icon}</span> : null}
                          <strong class="text-[var(--white)]">{sec.title}:</strong>{' '}
                          {sec.content}
                        </p>
                      ) : (
                        <div>
                          <p class="text-[var(--white-icon)] text-lg md:text-xl leading-8">
                            {sec.icon ? <span class="mr-2">{sec.icon}</span> : null}
                            <strong class="text-[var(--white)]">{sec.title}:</strong>
                          </p>
                          <ul class="text-[var(--white-icon)] text-base md:text-lg mt-2 list-disc pl-5 space-y-1">
                            {sec.items.map((item) => <li>{item}</li>)}
                          </ul>
                        </div>
                      )
                    ))}
                  </div>
                )}
                <a
                  target="_blank"
                  href={project.link}
                  aria-label={`Repositório de ${project.title}`}
                  class="inline-flex items-center gap-2 mt-4 text-[var(--white-icon)] hover:text-white transition duration-300 ease-in-out border border-[var(--white-icon-tr)] px-3 py-2 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    class="size-5"
                  >
                    <path
                      d="M12.001 2C6.47598 2 2.00098 6.475 2.00098 12C2.00098 16.425 4.86348 20.1625 8.83848 21.4875C9.33848 21.575 9.52598 21.275 9.52598 21.0125C9.52598 20.775 9.51348 19.9875 9.51348 19.15C7.00098 19.6125 6.35098 18.5375 6.15098 17.975C6.03848 17.6875 5.55098 16.8 5.12598 16.5625C4.77598 16.375 4.27598 15.9125 5.11348 15.9C5.90098 15.8875 6.46348 16.625 6.65098 16.925C7.55098 18.4375 8.98848 18.0125 9.56348 17.75C9.65098 17.1 9.91348 16.6625 10.201 16.4125C7.97598 16.1625 5.65098 15.3 5.65098 11.475C5.65098 10.3875 6.03848 9.4875 6.67598 8.7875C6.57598 8.5375 6.22598 7.5125 6.77598 6.1375C6.77598 6.1375 7.61348 5.875 9.52598 7.1625C10.326 6.9375 11.176 6.825 12.026 6.825C12.876 6.825 13.726 6.9375 14.526 7.1625C16.4385 5.8625 17.276 6.1375 17.276 6.1375C17.826 7.5125 17.476 8.5375 17.376 8.7875C18.0135 9.4875 18.401 10.375 18.401 11.475C18.401 15.3125 16.0635 16.1625 13.8385 16.4125C14.201 16.725 14.5135 17.325 14.5135 18.2625C14.5135 19.6 14.501 20.675 14.501 21.0125C14.501 21.275 14.6885 21.5875 15.1885 21.4875C19.259 20.1133 21.9999 16.2963 22.001 12C22.001 6.475 17.526 2 12.001 2Z"
                    />
                  </svg>
                  <span class="text-sm md:text-base font-medium"> Ver repositório </span>
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>
    <a
      target="_blank"
      href="https://github.com/BrunoChiconato?tab=repositories"
      aria-label="GitHub"
      class="w-full flex items-center justify-center gap-2 mt-9 text-[var(--white-icon)] hover:text-white transition duration-300 ease-in-out border border-[var(--white-icon-tr)] p-3 rounded-full bg-[#1414149c] hover:bg-[var(--white-icon-tr)] hover:scale-105"
    >
      <span class="md:text-lg text-md">Veja mais projetos no GitHub</span>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
        <path
          d="M12.001 2C6.47598 2 2.00098 6.475 2.00098 12C2.00098 16.425 4.86348 20.1625 8.83848 21.4875C9.33848 21.575 9.52598 21.275 9.52598 21.0125C9.52598 20.775 9.51348 19.9875 9.51348 19.15C7.00098 19.6125 6.35098 18.5375 6.15098 17.975C6.03848 17.6875 5.55098 16.8 5.12598 16.5625C4.77598 16.375 4.27598 15.9125 5.11348 15.9C5.90098 15.8875 6.46348 16.625 6.65098 16.925C7.55098 18.4375 8.98848 18.0125 9.56348 17.75C9.65098 17.1 9.91348 16.6625 10.201 16.4125C7.97598 16.1625 5.65098 15.3 5.65098 11.475C5.65098 10.3875 6.03848 9.4875 6.67598 8.7875C6.57598 8.5375 6.22598 7.5125 6.77598 6.1375C6.77598 6.1375 7.61348 5.875 9.52598 7.1625C10.326 6.9375 11.176 6.825 12.026 6.825C12.876 6.825 13.726 6.9375 14.526 7.1625C16.4385 5.8625 17.276 6.1375 17.276 6.1375C17.826 7.5125 17.476 8.5375 17.376 8.7875C18.0135 9.4875 18.401 10.375 18.401 11.475C18.401 15.3125 16.0635 16.1625 13.8385 16.4125C14.201 16.725 14.5135 17.325 14.5135 18.2625C14.5135 19.6 14.501 20.675 14.501 21.0125C14.501 21.275 14.6885 21.5875 15.1885 21.4875C19.259 20.1133 21.9999 16.2963 22.001 12C22.001 6.475 17.526 2 12.001 2Z"
        ></path>
      </svg>
    </a>
  </div>
</section>
