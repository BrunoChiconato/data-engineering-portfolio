---
import { Image } from "astro:assets";
import lakehouse from "../../public/lakehouse.png";
import stockmarket from "../../public/stockmarket.png";
import northwind from "../../public/northwind.png";
import scholarstream from "../../public/scholarstream.png";
const base = import.meta.env.BASE_URL;


interface Project {
  title: string;
  image: ImageMetadata;
  link: string;
  descriptionRich?: {
    sections: Array<
      | { icon?: string; title: string; type: 'paragraph'; content: string; size?: 'base' | 'lg' }
      | { icon?: string; title: string; type: 'list'; items: string[] }
    >;
  };
}

const projects: Project[] = [
  {
    title: "arXiv Lakehouse: Plataforma de Dados End-to-End na AWS com Databricks",
    image: lakehouse as ImageMetadata,
    link: "https://github.com/BrunoChiconato/lakehouse-from-scratch",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Converter o fluxo de dados brutos e não estruturados da API do arXiv (XML) em um ativo de dados confiável, governado e de alta performance para análises estratégicas."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Projetei um pipeline de dados end-to-end na AWS, utilizando a arquitetura Medallion (Bronze, Silver, Gold) com Databricks e Delta Lake para garantir qualidade e processamento incremental.",
            "Automatizei 100% do ciclo de vida da aplicação com CI/CD (GitHub Actions) e Infraestrutura como Código (Databricks Asset Bundles), garantindo deploys íntegros, testados e reprodutíveis.",
            "Implementei a governança de dados com Unity Catalog para garantir segurança, controle de acesso granular (RBAC) e linhagem de dados completa (data lineage) em todo o lakehouse."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Criei uma plataforma analítica centralizada que entrega dados limpos e prontos para o consumo, habilitando times de BI e Data Science a gerar insights com maior velocidade e confiança.",
            "Eliminei o risco operacional de deploys manuais através da automação total do pipeline e de uma suíte de testes robusta (unitários e de integração), assegurando a resiliência e a qualidade contínua do produto de dados."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "Python, PySpark, Databricks, AWS (S3), Delta Lake, Unity Catalog, CI/CD (GitHub Actions), IaC (Databricks Asset Bundles), Pytest.",
          size: "base"
        }
      ]
    }
  },
  {
    title: "Análise de Ações: Pipeline de Orquestração de Dados com Airflow e Spark",
    image: stockmarket as ImageMetadata,
    link: "https://github.com/BrunoChiconato/airflow-stock-market-pipeline",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Automatizar a coleta, processamento e visualização de dados do mercado de ações para permitir a análise de tendências de forma consistente e confiável, eliminando o processo manual e propenso a erros."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Desenvolvi um pipeline de dados end-to-end, totalmente containerizado com Docker, para orquestrar o ciclo de vida completo dos dados, desde a ingestão da API até a visualização.",
            "Utilizei o Apache Airflow como orquestrador central para gerenciar o fluxo de trabalho, incluindo a verificação da disponibilidade da fonte (Sensor), a ingestão de dados brutos e o disparo de jobs de processamento.",
            "Implementei uma arquitetura de dados com MinIO (Object Store) como Data Lake para dados brutos, Apache Spark para transformações de larga escala, e PostgreSQL como Data Warehouse para servir as análises.",
            "Integrei a entrega de valor com um dashboard no Metabase para visualização de KPIs e um sistema de notificações no Slack para alertar sobre a conclusão do pipeline."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Automatizei 100% o processo de análise de dados financeiros, fornecendo um dashboard atualizado de forma consistente e sem necessidade de intervenção manual.",
            "Criei um sistema resiliente e monitorável, com capacidade de retentativas automáticas (retries), logging centralizado e alertas, garantindo alta disponibilidade e rápida detecção de falhas.",
            "A arquitetura containerizada e desacoplada resulta em uma plataforma escalável, pronta para suportar novas fontes de dados ou um volume maior de processamento com mínimo esforço."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "Apache Airflow, Docker, Apache Spark, MinIO (S3), PostgreSQL, Metabase, Python, Slack.",
          size: "base"
        }
      ]
    }
  },
  {
    title: "Plataforma de Analytics com dbt, Terraform e AWS Fargate",
    image: northwind as ImageMetadata,
    link: "https://github.com/BrunoChiconato/dbt-analytics-pipeline",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Transformar o desenvolvimento de analytics de um processo manual e propenso a erros para um ciclo de vida automatizado, versionado e confiável, aplicando práticas de engenharia de software à transformação de dados."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Construí uma plataforma de dados 100% como código (IaC) com Terraform, provisionando uma infraestrutura de rede segura e escalável na AWS (VPC, RDS, S3, Fargate) de forma totalmente reprodutível.",
            "Desenvolvi um pipeline de CI/CD com GitHub Actions que automatiza o ciclo completo a partir de um git push: construção da imagem Docker, execução dos modelos dbt, validação com testes de qualidade e publicação da documentação.",
            "Orquestrei a execução das transformações de dados em um ambiente serverless com AWS Fargate, eliminando a necessidade de gerenciamento de servidores e otimizando os custos para um modelo de pagamento por uso.",
            "Modelei os dados utilizando dbt para criar camadas de staging, intermediate e marts, garantindo a confiabilidade com testes de qualidade (dbt test) e a governança com documentação automatizada (dbt docs)."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Criei um framework de Analytics Engineering que acelera drasticamente o ciclo de desenvolvimento, permitindo que analistas foquem na lógica de negócio (SQL) enquanto a plataforma cuida da infraestrutura, testes e deploys.",
            "Aumentei a confiança nos dados através de um processo de deploy versionado e da execução de testes de qualidade automatizados a cada mudança no código.",
            "Reduzi o custo e a complexidade operacional ao adotar uma arquitetura totalmente serverless, eliminando a sobrecarga de gerenciamento de infraestrutura."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "dbt, Terraform, AWS (Fargate, RDS, S3, ECR), Docker, CI/CD (GitHub Actions), PostgreSQL.",
          size: "base"
        }
      ]
    }
  },
  {
    title: "ScholarStream: Pipeline de Streaming em Tempo Real com Firehose e Snowflake",
    image: scholarstream as ImageMetadata,
    link: "https://github.com/BrunoChiconato/scholar-stream",
    descriptionRich: {
      sections: [
        {
          icon: "",
          title: "Desafio",
          type: "paragraph",
          content:
            "Construir pipelines de streaming que entreguem dados para análise em tempo real, mas que também sejam governados, seguros e observáveis desde o início, evitando implementações ad-hoc, lentas e sem garantias de performance ou segurança."
        },
        {
          icon: "",
          title: "Solução",
          type: "list",
          items: [
            "Projetei uma arquitetura de streaming de baixa latência utilizando AWS Kinesis Data Firehose para ingerir eventos da API OpenAlex diretamente no Snowflake, seguindo um padrão ELT moderno com dados brutos em VARIANT e views analíticas.",
            "Automatizei o provisionamento da infraestrutura de nuvem (Firehose, IAM) com Terraform e a configuração do Snowflake (roles, schemas, masking) com scripts SQL, criando um ambiente 100% como código, versionado e reprodutível.",
            "Implementei um framework de governança e segurança robusto no Snowflake com Role-Based Access Control (RBAC) e Mascaramento Dinâmico de Dados (Dynamic Data Masking) para proteger informações sensíveis (PII).",
            "Desenvolvi um sistema de observabilidade com views no Snowflake para monitorar a latência do pipeline em tempo real (end-to-end), permitindo o acompanhamento de SLOs (ex: p50 ≤ 20s)."
          ]
        },
        {
          icon: "",
          title: "Impacto",
          type: "list",
          items: [
            "Criei uma plataforma capaz de entregar dados para análise com latência de segundos, habilitando a tomada de decisão baseada em informações quase em tempo real.",
            "Garanti a segurança e a conformidade dos dados desde a concepção, com políticas de mascaramento que protegem PII de usuários não autorizados de forma automática e transparente.",
            "Desenvolvi um blueprint para pipelines de streaming que é performático, governado, observável e de rápida implementação, reduzindo drasticamente o tempo de setup de novos fluxos de dados."
          ]
        },
        {
          icon: "",
          title: "Stack",
          type: "paragraph",
          content:
            "Python, AWS (Kinesis Firehose), Snowflake, Terraform (IaC), Streamlit, GitHub Actions.",
          size: "base"
        }
      ]
    }
  },
];
---

<section id="projetos" class="scroll-mt-24 py-12 border-t border-[#ffffff10] text-[var(--white)]">
  <div class="max-w-5xl mx-auto">
    <h2 class="text-lg text-[var(--sec)] mb-2 shiny-sec">Meus projetos</h2>
    <h3 class="text-4xl md:text-5xl font-medium mb-8">Projetos</h3>
    <div class="grid grid-cols-1 gap-0">
      {
        projects.map((project) => (
          <div class="block border-t border-[#ffffff10] py-12 md:py-16 first:border-t-0 first:pt-0">
            <div class="rounded-2xl overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 mb-6">
              <div class="aspect-video"> <!-- 16:9 -->
                <Image
                  src={project.image}
                  alt={project.title}
                  class="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                />
              </div>
            </div>
            <div class="px-3">
              <div>
                <h4 class="text-3xl font-semibold">{project.title}</h4>
                {project.descriptionRich && (
                  <div class="mt-3 space-y-4">
                    {project.descriptionRich.sections.map((sec) => (
                      sec.type === 'paragraph' ? (
                        <p class={`text-[var(--white-icon)] ${
                              sec.size === 'base' ? 'text-base md:text-lg' : 'text-lg md:text-xl'
                            } leading-8`}>
                          {sec.icon ? <span class="mr-2">{sec.icon}</span> : null}
                          <strong class="text-[var(--white)]">{sec.title}:</strong>{' '}
                          {sec.content}
                        </p>
                      ) : (
                        <div>
                          <p class="text-[var(--white-icon)] text-lg md:text-xl leading-8">
                            {sec.icon ? <span class="mr-2">{sec.icon}</span> : null}
                            <strong class="text-[var(--white)]">{sec.title}:</strong>
                          </p>
                          <ul class="text-[var(--white-icon)] text-base md:text-lg mt-2 list-disc pl-5 space-y-1">
                            {sec.items.map((item) => <li>{item}</li>)}
                          </ul>
                        </div>
                      )
                    ))}
                  </div>
                )}
                <a
                  target="_blank"
                  href={project.link}
                  aria-label={`Repositório de ${project.title}`}
                  class="inline-flex items-center gap-2 mt-4 text-[var(--white-icon)] hover:text-white transition duration-300 ease-in-out border border-[var(--white-icon-tr)] px-3 py-2 rounded-xl bg-[#1414149c] hover:bg-[var(--white-icon-tr)]"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                    class="size-5"
                  >
                    <path
                      d="M12.001 2C6.47598 2 2.00098 6.475 2.00098 12C2.00098 16.425 4.86348 20.1625 8.83848 21.4875C9.33848 21.575 9.52598 21.275 9.52598 21.0125C9.52598 20.775 9.51348 19.9875 9.51348 19.15C7.00098 19.6125 6.35098 18.5375 6.15098 17.975C6.03848 17.6875 5.55098 16.8 5.12598 16.5625C4.77598 16.375 4.27598 15.9125 5.11348 15.9C5.90098 15.8875 6.46348 16.625 6.65098 16.925C7.55098 18.4375 8.98848 18.0125 9.56348 17.75C9.65098 17.1 9.91348 16.6625 10.201 16.4125C7.97598 16.1625 5.65098 15.3 5.65098 11.475C5.65098 10.3875 6.03848 9.4875 6.67598 8.7875C6.57598 8.5375 6.22598 7.5125 6.77598 6.1375C6.77598 6.1375 7.61348 5.875 9.52598 7.1625C10.326 6.9375 11.176 6.825 12.026 6.825C12.876 6.825 13.726 6.9375 14.526 7.1625C16.4385 5.8625 17.276 6.1375 17.276 6.1375C17.826 7.5125 17.476 8.5375 17.376 8.7875C18.0135 9.4875 18.401 10.375 18.401 11.475C18.401 15.3125 16.0635 16.1625 13.8385 16.4125C14.201 16.725 14.5135 17.325 14.5135 18.2625C14.5135 19.6 14.501 20.675 14.501 21.0125C14.501 21.275 14.6885 21.5875 15.1885 21.4875C19.259 20.1133 21.9999 16.2963 22.001 12C22.001 6.475 17.526 2 12.001 2Z"
                    />
                  </svg>
                  <span class="text-sm md:text-base font-medium"> Ver repositório </span>
                </a>
              </div>
            </div>
          </div>
        ))
      }
    </div>
    <a
      target="_blank"
      href="https://github.com/BrunoChiconato?tab=repositories"
      aria-label="GitHub"
      class="w-full flex items-center justify-center gap-2 mt-9 text-[var(--white-icon)] hover:text-white transition duration-300 ease-in-out border border-[var(--white-icon-tr)] p-3 rounded-full bg-[#1414149c] hover:bg-[var(--white-icon-tr)] hover:scale-105"
    >
      <span class="md:text-lg text-md">Veja mais projetos no GitHub</span>
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="size-6">
        <path
          d="M12.001 2C6.47598 2 2.00098 6.475 2.00098 12C2.00098 16.425 4.86348 20.1625 8.83848 21.4875C9.33848 21.575 9.52598 21.275 9.52598 21.0125C9.52598 20.775 9.51348 19.9875 9.51348 19.15C7.00098 19.6125 6.35098 18.5375 6.15098 17.975C6.03848 17.6875 5.55098 16.8 5.12598 16.5625C4.77598 16.375 4.27598 15.9125 5.11348 15.9C5.90098 15.8875 6.46348 16.625 6.65098 16.925C7.55098 18.4375 8.98848 18.0125 9.56348 17.75C9.65098 17.1 9.91348 16.6625 10.201 16.4125C7.97598 16.1625 5.65098 15.3 5.65098 11.475C5.65098 10.3875 6.03848 9.4875 6.67598 8.7875C6.57598 8.5375 6.22598 7.5125 6.77598 6.1375C6.77598 6.1375 7.61348 5.875 9.52598 7.1625C10.326 6.9375 11.176 6.825 12.026 6.825C12.876 6.825 13.726 6.9375 14.526 7.1625C16.4385 5.8625 17.276 6.1375 17.276 6.1375C17.826 7.5125 17.476 8.5375 17.376 8.7875C18.0135 9.4875 18.401 10.375 18.401 11.475C18.401 15.3125 16.0635 16.1625 13.8385 16.4125C14.201 16.725 14.5135 17.325 14.5135 18.2625C14.5135 19.6 14.501 20.675 14.501 21.0125C14.501 21.275 14.6885 21.5875 15.1885 21.4875C19.259 20.1133 21.9999 16.2963 22.001 12C22.001 6.475 17.526 2 12.001 2Z"
        ></path>
      </svg>
    </a>
  </div>
</section>
